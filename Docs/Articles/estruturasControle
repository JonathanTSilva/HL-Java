<!-- LOGO DIREITO -->
<a href="#"><img width="200px" src="https://miro.medium.com/max/1400/1*BENOXzD3k4_-nzgYEkyDTw.png" align="right" /></a>

# Estruturas de Controle

<p align="left">
  <a href="https://github.com/JonathanTSilva/HL-Java">
    <img src="https://img.shields.io/static/v1?label=HomeLab&message=Java&color=red&logo=java&logoColor=white&labelColor=grey&style=flat" alt="HL-Java">
  </a>
</p>

üèõ Estruturas que definem a ordem em que os comados s√£o executados em um programa.

<!-- SUM√ÅRIO -->
- [Estruturas de Controle](#estruturas-de-controle)
  - [1. Estrutura Sequencial](#1-estrutura-sequencial)
    - [1.1. Express√µes aritm√©ticas](#11-express√µes-aritm√©ticas)
    - [1.2. Vari√°veis](#12-vari√°veis)
    - [1.3. Opera√ß√µes b√°sicas de programa√ß√£o](#13-opera√ß√µes-b√°sicas-de-programa√ß√£o)
      - [1.3.1. Sa√≠da de dados](#131-sa√≠da-de-dados)
    - [1.3. Opera√ß√µes b√°sicas de programa√ß√£o](#13-opera√ß√µes-b√°sicas-de-programa√ß√£o-1)
  - [2. Estrutura Condicional](#2-estrutura-condicional)
  - [3. Estrutura Repetitiva](#3-estrutura-repetitiva)

<!-- VOLTAR AO IN√çCIO -->
<a href="#"><img width="40px" src="https://github.com/JonathanTSilva/JonathanTSilva/blob/main/Images/back-to-top.png" align="right" /></a>

## 1. Estrutura Sequencial

### 1.1. Express√µes aritm√©ticas

As express√µes aritm√©ticas na programa√ß√£o se desenvolvem da mesma forma que na matem√°tica, at√© mesmo nos precedentes. A √∫nica diferen√ßa √© que na programa√ß√£o, n√£o se utiliza chaves {} e colchetes [] para alterar a preced√™ncia, mas apenas par√™nteses (). Outro detalhe √© a adi√ß√£o de um novo operador aritm√©tico para simbolizar o resto da divis√£o, `%`, chamado "mod".

### 1.2. Vari√°veis

Em programa√ß√£o, uma vari√°vel √© uma por√ß√£o de mem√≥ria (RAM) utilizada para armazenar dados durante a execu√ß√£o dos programas. A declara√ß√£o de uma vari√°vel em java √© feita da seguinte forma:

```java
<tipo> <nome> = <valor inicial>
```

> **Nota:** apesar de n√£o ser vis√≠vel, a vari√°vel possui um endere√ßo de aloca√ß√£o na mem√≥ria.

A tabela abaixo lista todos os tipos primitivos de vari√°veis na linguagem Java.

| Descri√ß√£o                    | Tipo      | Tamanho | Valores                  | Valor padr√£o |
| :--------------------------- | :-------- | :------ | :----------------------- | :----------- |
| Num√©rico inteiro             | `byte`    | 8 bits  | -128 a 127               | 0            |
| Num√©rico inteiro             | `short`   | 16 bits | -32768 a 32767           | 0            |
| Num√©rico inteiro             | `int`     | 32 bits | -2147483648 a 2147483648 | 0            |
| Num√©rico inteiro             | `long`    | 64 bits | -9.2...E-18 + 9.2...E+18 | 0L           |
| Num√©rico com ponto flutuante | `float`   | 32 bits | -1.4024E-37 a 3.4028E+38 | 0.0f         |
| Num√©rico com ponto flutuante | `double`  | 64 bits | -4.94E-307 a 1.79E+308   | 0.0          |
| Um caractere Unicode         | `char`    | 16 bits | '\u0000' a '\uFFFF'      | '\u0000'     |
| Valor verdade                | `boolean` | 1 bit   | {false, true}            | false        |

> **Nota:** tamb√©m h√° o tipo String, que √© uma cadeia de caracteres para armazenar palavras ou textos

Os nomes das vari√°veis devem respeitar as seguintes regras:

- N√£o pode come√ßar com um d√≠gito: usar uma letra ou _;
- N√£o pode ter espa√ßo em branco;
- N√£o usar acentos ou til;
- Iniciar com letra min√∫scula;
- Sugest√£o: use o padr√£o "camel case".

### 1.3. Opera√ß√µes b√°sicas de programa√ß√£o

Um programa de computador √© capaz de realizar essencialmente tr√™s opera√ß√µes:

1. Entrada de dados (leitura): usu√°rio informa dados para o programa (salvos em vari√°veis) atrav√©s de um teclado, por exemplo;
2. Processamento de dados (atribui√ß√£o): programa realiza os c√°lculos;
3. Sa√≠da de dados (escrita): programa informa dados para o usu√°rio.

#### 1.3.1. Sa√≠da de dados

Dois comandos b√°sicos para sa√≠da de dados em Java: `System.out.print("Texto!");` e `System.out.println("Texto!");`, sendo o primeiro sem quebra de linha e o segundo com a quebra de linha no final. Segue abaixo as seguintes configura√ß√µes para estes comando de sa√≠da:

- Para vari√°veis com valores inteiros e decimais: `System.out.println(x);`;
- Para vari√°veis com ponto flutuante, controlando a quantidade de casas decimais: `System.out.printf("%.2f%n", x);`. O print**F** significa print FORMATADO;

> **Nota:** o `printf `pega o formato de n√∫meros utilizado no computador por padr√£o, podendo aparecer, como separador. Assim, √© necess√°rio adicionar o seguinte comando no c√≥digo: `Local.setDefault(Locale.US)` e realizar a importa√ß√£o do pacote `import java.util.Locale`.

Os principais marcadores de vari√°veis no Java s√£o:

| Comando | Descri√ß√£o       |
| :------ | :-------------- |
| `%f`    | Ponto flutuante |
| `%d`    | Inteiro         |
| `%s`    | Texto           |
| `%n`    | Quebra de linha |

### 1.3. Opera√ß√µes b√°sicas de programa√ß√£o

<!-- VOLTAR AO IN√çCIO -->
<a href="#"><img width="40px" src="https://github.com/JonathanTSilva/JonathanTSilva/blob/main/Images/back-to-top.png" align="right" /></a>

## 2. Estrutura Condicional

<!-- VOLTAR AO IN√çCIO -->
<a href="#"><img width="40px" src="https://github.com/JonathanTSilva/JonathanTSilva/blob/main/Images/back-to-top.png" align="right" /></a>

## 3. Estrutura Repetitiva

<!-- MARKDOWN LINKS -->
<!-- SITES -->

<!-- IMAGES -->
